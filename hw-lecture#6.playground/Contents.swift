
 /*
 //Сделать функцию принимающую два опциональных параметра. Сделать проверку, что оба не nil. Второй параметр число которое должно быть больше 0. Первый параметр строка. При успешном выполнении условий в консоль выводится первый параметр в количестве записанном во втором параметре. Например первый параметр “Hello”, а второй 3 - строка “Hello” выводится 3 раза.//
 


//defer
//Функция принимает 2 строки. Вторая опциональная. Возвращается строка. Если вторая строка nil то мы возвращаем первую строку, если нет, то возвращаем их конкатенацию (обьеденения). Перед завершением функции мы выводим в консоль длину результирующей строки*/


 func deferFunc (str1: String,  str2: String?) -> String {
    if str2 == nil {
        return str1
    }else{
        return str1 + str2!
    }
}
deferFunc("Hello_", str2: "World")
deferFunc("Hello", str2: nil)


 
/*Функция-переменная
Переменная хранит функцию с двумя параметрами строками и результатом строкою.
Сначала  мы туда записываем функцию которая конкатенирует строки и возвращает результат. Потом функцию которая сравнивает длину строк и возвращает First/Second в зависимости от того какая строка длиннее.

Замыкания
Функция принимает 2 параметра (ничего не возвращает). Первый число. Фторой функция с параметром числом и возвращаемым значением числом. Базовая функция в теле передает первый параметр во второй(функцию). В примере просто сделать во втором параметре return этого числа (это нужно так как функция возвращает число)

Touple
Функция принимает строку и возвращает 2 строки. По идее это должна быть функция которая разбивает строку с именем и фамилией на 2 составляющих. Есть стандартная функция для превращения строки в массив - ???*/



//Map - ???
//Ваша модель Автомобиль (имя водителя, возраст водителя, марка автомобиля, вес автомобиля, максимальная скорость) Возвращаем массив Person(имя, возраст). Это стандартное использование маппинга, когда одну модель превращают в другую

class Auto {
    var name: String
    var age: Int
    var marka: String
    var weight: Int
    var fastSpeed: Int
    
    init(name: String, age: Int, marka: String, weight: Int, fastSpeed: Int) {
        self.name = name
        self.age = age
    self.marka = marka
    self.weight = weight
    self.fastSpeed = fastSpeed
    }
}

let auto1 = Auto(name: "Ivan", age: 30, marka: "BMW", weight: 1500, fastSpeed: 250)
let auto2 = Auto(name: "Paolo", age: 45, marka: "Mercedes", weight: 1800, fastSpeed: 300)
let auto3 = Auto(name: "Vova", age: 40, marka: "VAZ", weight: 1000, fastSpeed: 120)
let auto4 = Auto(name: "Tom", age: 25, marka: "Porshe", weight: 2500, fastSpeed: 330)
let auto5 = Auto(name: "Barbara Streisen", age: 28, marka: "Range Rover", weight: 2000, fastSpeed: 350)

var modelAutoArray = [auto1, auto2, auto3, auto4, auto5]

modelAutoArray


var modelAutoArray2 = modelAutoArray.map { $0.name; $0.age }
modelAutoArray2


//Filter
//Ваша модель Автомобиль (Водитель(имя, возраст), марка машины, максимальная скорость). Мы должны отфильтровать и найти все машины у которых у водителей кризис среднего возраста. То есть возраст за 40 и максимальная скорость больше 250.

let filterArray = modelAutoArray.filter { $0.age > 40 && $0.fastSpeed > 250 }
filterArray


//Reduce
//Конкатенировать все строки из массива строк в одну

let someArray = ["Hello", " ", "World"]

someArray.reduce("", combine: +)



//Sort
//Ваша модель Автомобиль (Водитель(имя, возраст), марка машины, максимальная скорость). Отсортировать по возрасту водителей

let sortedArray = modelAutoArray.sort { $0.age < $1.age}
sortedArray










